name: Continuous Deployment to GCP [Windows]

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "main"
  workflow_dispatch:

jobs:
  deploy-infrastructure:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Get the microservice version from README.md
        id: version
        run: |
          $PPT_PRD = Get-Content README.md | Select-String -Pattern '(?<=<!-- ppt-prd-start -->).*(?=<!-- ppt-prd-end -->)' | ForEach-Object { $_.Matches.Value }
          Write-Output "PPT_PRD=$PPT_PRD" >> $env:GITHUB_ENV

      - name: Build Image URL
        id: build_image_url
        run: |
          Write-Output "IMAGE_URL=${env:DOCKER_REGISTRY}/jtsato/${env:ARTIFACT_NAME}:${env:PPT_PRD}" >> $env:GITHUB_ENV

      - name: Set Environment Variables from GitHub Secrets
        env:
          IMAGE_URL: ${{ env.IMAGE_URL }}
          PPT_PRD: ${{ env.PPT_PRD }}
        run: |
          Write-Output "ARTIFACT=${env:IMAGE_URL}:${env:PPT_PRD}"
          Write-Output "TF_LOG=debug" >> $env:GITHUB_ENV
          Write-Output "TF_VAR_PROJECT_ID=${env:PROJECT_ID}" >> $env:GITHUB_ENV
          Write-Output "TF_VAR_CLOUD_REGION=${env:CLOUD_REGION}" >> $env:GITHUB_ENV
          Write-Output "TF_VAR_ZONE=${env:ZONE}" >> $env:GITHUB_ENV
          Write-Output "TF_VAR_SERVICE_NAME=${env:SERVICE_NAME}" >> $env:GITHUB_ENV
          Write-Output "TF_VAR_IMAGE_URL=${env:IMAGE_URL}" >> $env:GITHUB_ENV
          Write-Output "TF_VAR_ASPNETCORE_ENVIRONMENT=${env:ASPNETCORE_ENVIRONMENT}" >> $env:GITHUB_ENV
          Write-Output "TF_VAR_ASPNETCORE_URLS=${env:ASPNETCORE_URLS}" >> $env:GITHUB_ENV
          Write-Output "TF_VAR_MONGODB_URL=${secrets.MONGODB_URL}" >> $env:GITHUB_ENV
          Write-Output "TF_VAR_MONGODB_DATABASE=${secrets.MONGODB_DATABASE}" >> $env:GITHUB_ENV
          Write-Output "TF_VAR_PROPERTY_COLLECTION_NAME=${secrets.PROPERTY_COLLECTION_NAME}" >> $env:GITHUB_ENV
          Write-Output "TF_VAR_PROPERTY_SEQUENCE_COLLECTION_NAME=${secrets.PROPERTY_SEQUENCE_COLLECTION_NAME}" >> $env:GITHUB_ENV
          Write-Output "TF_VAR_TZ=${env:TZ}" >> $env:GITHUB_ENV

      - name: Terraform Version
        run: terraform -version

      - name: Terraform Init
        run: terraform init

      - name: Terraform validate
        run: |
          terraform validate

      - name: Verify Terraform Providers
        run: |
          terraform providers lock -platform=windows_amd64 -platform=darwin_amd64 -platform=linux_amd64 -platform=darwin_arm64 -platform=linux_arm64

      - name: Create secrets.tfvars
        run: |
          Write-Output "project_id=\"$env:TF_VAR_PROJECT_ID\"" > secrets.tfvars
          Write-Output "cloud_region=\"$env:TF_VAR_CLOUD_REGION\"" >> secrets.tfvars
          Write-Output "zone=\"$env:TF_VAR_ZONE\"" >> secrets.tfvars
          Write-Output "service_name=\"$env:TF_VAR_SERVICE_NAME\"" >> secrets.tfvars
          Write-Output "image_url=\"$env:TF_VAR_IMAGE_URL\"" >> secrets.tfvars
          Write-Output "aspnetcore_environment=\"$env:TF_VAR_ASPNETCORE_ENVIRONMENT\"" >> secrets.tfvars
          Write-Output "aspnetcore_urls=[\"$env:TF_VAR_ASPNETCORE_URLS\"]" >> secrets.tfvars
          Write-Output "mongodb_url=\"$env:TF_VAR_MONGODB_URL\"" >> secrets.tfvars
          Write-Output "mongodb_database=\"$env:TF_VAR_MONGODB_DATABASE\"" >> secrets.tfvars
          Write-Output "property_collection_name=\"$env:TF_VAR_PROPERTY_COLLECTION_NAME\"" >> secrets.tfvars
          Write-Output "property_sequence_collection_name=\"$env:TF_VAR_PROPERTY_SEQUENCE_COLLECTION_NAME\"" >> secrets.tfvars
          Write-Output "tz=\"$env:TF_VAR_TZ\"" >> secrets.tfvars

      - name: Terraform Destroy
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform destroy -auto-approve -var-file=secrets.tfvars

      - name: Terraform Refresh
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform refresh -var-file=secrets.tfvars

      - name: Terraform State List
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform state list

      - name: Terraform Plan
        id: plan
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform plan -out=tfplan.out -var-file=secrets.tfvars

      - name: Terraform Apply
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform apply -auto-approve tfplan.out
