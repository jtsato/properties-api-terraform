name: Continuous Deployment to GCP [Linux]

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "main"
  workflow_dispatch:

concurrency:
  group: "continuous-deployment"
  cancel-in-progress: false

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Get the microservice version from README.md
        id: version
        run: |
          echo "PRP_PRD=$(cat README.md | grep -o -P '(?<=<!-- prp-prd-start -->).*(?=<!-- prp-prd-end -->)')" >> $GITHUB_ENV

      - name: Build Image URL
        id: build_image_url
        run: |
          echo "IMAGE_URL=${{ vars.DOCKER_REGISTRY }}/jtsato/${{ vars.ARTIFACT_NAME }}:${{ env.PRP_PRD }}" >> $GITHUB_ENV

      - name: Set Environment Variables from GitHub Secrets
        env:
          IMAGE_URL: ${{ env.IMAGE_URL }}
          PRP_PRD: ${{ env.PRP_PRD }}
        run: |
          echo "ARTIFACT=${{ env.IMAGE_URL }}:${{ env.PRP_PRD }}"
          echo "TF_LOG=debug" >> $GITHUB_ENV
          echo "TF_VAR_PROJECT_ID=${{ vars.PROJECT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_CLOUD_REGION=${{ vars.CLOUD_REGION }}" >> $GITHUB_ENV
          echo "TF_VAR_ZONE=${{ vars.ZONE }}" >> $GITHUB_ENV
          echo "TF_VAR_SERVICE_NAME=${{ vars.SERVICE_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_IMAGE_URL=${{ env.IMAGE_URL }}" >> $GITHUB_ENV
          echo "TF_VAR_ASPNETCORE_ENVIRONMENT=${{ vars.ASPNETCORE_ENVIRONMENT }}" >> $GITHUB_ENV
          echo "TF_VAR_ASPNETCORE_URLS=${{ vars.ASPNETCORE_URLS }}" >> $GITHUB_ENV
          echo "TF_VAR_MONGODB_URL=${{ secrets.MONGODB_URL }}" >> $GITHUB_ENV
          echo "TF_VAR_MONGODB_DATABASE=${{ secrets.MONGODB_DATABASE }}" >> $GITHUB_ENV
          echo "TF_VAR_PROPERTY_COLLECTION_NAME=${{ secrets.PROPERTY_COLLECTION_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_PROPERTY_SEQUENCE_COLLECTION_NAME=${{ secrets.PROPERTY_SEQUENCE_COLLECTION_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_TZ=${{ vars.TZ }}" >> $GITHUB_ENV

      - name: Terraform Version
        run: terraform -version

      - name: Terraform Init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: terraform init

      - name: Terraform validate
        run: |
          terraform validate

      - name: Verify Terraform Providers
        run: |
          terraform providers lock -platform=windows_amd64 -platform=darwin_amd64 -platform=linux_amd64 -platform=darwin_arm64 -platform=linux_arm64

      - name: Create secrets.tfvars
        run: |
          echo "project_id=\"$TF_VAR_PROJECT_ID\"" > secrets.tfvars
          echo "cloud_region=\"$TF_VAR_CLOUD_REGION\"" >> secrets.tfvars
          echo "zone=\"$TF_VAR_ZONE\"" >> secrets.tfvars
          echo "service_name=\"$TF_VAR_SERVICE_NAME\"" >> secrets.tfvars
          echo "image_url=\"$TF_VAR_IMAGE_URL\"" >> secrets.tfvars
          echo "aspnetcore_environment=\"$TF_VAR_ASPNETCORE_ENVIRONMENT\"" >> secrets.tfvars
          echo "aspnetcore_urls=[\"$TF_VAR_ASPNETCORE_URLS\"]" >> secrets.tfvars
          echo "mongodb_url=\"$TF_VAR_MONGODB_URL\"" >> secrets.tfvars
          echo "mongodb_database=\"$TF_VAR_MONGODB_DATABASE\"" >> secrets.tfvars
          echo "property_collection_name=\"$TF_VAR_PROPERTY_COLLECTION_NAME\"" >> secrets.tfvars
          echo "property_sequence_collection_name=\"$TF_VAR_PROPERTY_SEQUENCE_COLLECTION_NAME\"" >> secrets.tfvars
          echo "tz=\"$TF_VAR_TZ\"" >> secrets.tfvars

      - name: Terraform Destroy
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform destroy -auto-approve -var-file=secrets.tfvars

      - name: Terraform Refresh
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform refresh -var-file=secrets.tfvars

      - name: Terraform State List
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform state list

      - name: Terraform Plan
        id: plan
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform plan -out=tfplan.out -var-file=secrets.tfvars

      - name: Terraform Apply
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform apply -auto-approve tfplan.out
