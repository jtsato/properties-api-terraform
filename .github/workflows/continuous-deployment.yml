name: Continuous Deployment

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "main"
  workflow_dispatch:

env:
  
  DOCKER_REGISTRY: "docker.io"
  ARTIFACT_NAME: "properties-api"
  PROJECT_ID: "duckhome-firebase"
  PROJECT_NAME: "duckhome-project"
  SERVICE_NAME: "properties-api-service"
  CLOUD_REGION: "southamerica-east1"
  ZONE: "southamerica-east1-a"
  ASPNETCORE_ENVIRONMENT: "Production"
  ASPNETCORE_URLS: "http://*:80"
  TZ: "America/Sao_Paulo"

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.2

      - name: Get the microservice version from README.md
        id: version
        run: |
          echo "PPT_PRD=$(cat README.md | grep -o -P '(?<=<!-- ppt-prd-start -->).*(?=<!-- ppt-prd-end -->)')" >> $GITHUB_ENV

      - name: Build Image URL
        id: build_image_url
        run: |
          echo "IMAGE_URL=docker.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ env.PPT_PRD }}" >> $GITHUB_ENV

      - name: Set Environment Variables from GitHub Secrets
        env:
          IMAGE_URL: ${{ env.IMAGE_URL }}
          PPT_PRD: ${{ env.PPT_PRD }}
        run: |
          echo "IMAGE_URL=${{ env.IMAGE_URL }}"
          echo "PPT_PRD=${{ env.PPT_PRD }}"
          echo "TF_VAR_PROJECT_ID=${{ env.PROJECT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_PROJECT_NAME=${{ env.PROJECT_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_CLOUD_REGION=${{ env.CLOUD_REGION }}" >> $GITHUB_ENV
          echo "TF_VAR_ZONE=${{ env.ZONE }}" >> $GITHUB_ENV
          echo "TF_VAR_SERVICE_NAME=${{ env.SERVICE_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_IMAGE_URL=${{ env.IMAGE_URL }}" >> $GITHUB_ENV
          echo "TF_VAR_ASPNETCORE_ENVIRONMENT=${{ env.ASPNETCORE_ENVIRONMENT }}" >> $GITHUB_ENV
          echo "TF_VAR_ASPNETCORE_URLS=${{ env.ASPNETCORE_URLS }}" >> $GITHUB_ENV
          echo "TF_VAR_MONGODB_URL=${{ secrets.MONGODB_URL }}" >> $GITHUB_ENV
          echo "TF_VAR_MONGODB_DATABASE=${{ secrets.MONGODB_DATABASE }}" >> $GITHUB_ENV
          echo "TF_VAR_PROPERTY_COLLECTION_NAME=${{ secrets.PROPERTY_COLLECTION_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_PROPERTY_SEQUENCE_COLLECTION_NAME=${{ secrets.PROPERTY_SEQUENCE_COLLECTION_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_TZ=${{ env.TZ }}" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init

      - name: Terraform validate
        run: |
          terraform validate

      - name: Create secrets.tfvars
        run: |
          echo "project_id=\"$TF_VAR_PROJECT_ID\"" > secrets.tfvars
          echo "project_name=\"$TF_VAR_PROJECT_NAME\"" >> secrets.tfvars
          echo "cloud_region=\"$TF_VAR_CLOUD_REGION\"" >> secrets.tfvars
          echo "zone=\"$TF_VAR_ZONE\"" >> secrets.tfvars
          echo "service_name=\"$TF_VAR_SERVICE_NAME\"" >> secrets.tfvars
          echo "image_url=\"$TF_VAR_IMAGE_URL\"" >> secrets.tfvars
          echo "aspnetcore_environment=\"$TF_VAR_ASPNETCORE_ENVIRONMENT\"" >> secrets.tfvars
          echo "aspnetcore_urls=[\"$TF_VAR_ASPNETCORE_URLS\"]" >> secrets.tfvars
          echo "mongodb_url=\"$TF_VAR_MONGODB_URL\"" >> secrets.tfvars
          echo "mongodb_database=\"$TF_VAR_MONGODB_DATABASE\"" >> secrets.tfvars
          echo "property_collection_name=\"$TF_VAR_PROPERTY_COLLECTION_NAME\"" >> secrets.tfvars
          echo "property_sequence_collection_name=\"$TF_VAR_PROPERTY_SEQUENCE_COLLECTION_NAME\"" >> secrets.tfvars
          echo "tz=\"$TF_VAR_TZ\"" >> secrets.tfvars

      - name: Terraform Destroy
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform destroy -auto-approve -var-file=secrets.tfvars

      - name: Terraform Refresh
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          sleep 10
          terraform refresh -var-file=secrets.tfvars

      - name: Terraform Plan
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform plan -out=tfplan.out -var-file=secrets.tfvars

      - name: Terraform Apply
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform apply -auto-approve tfplan.out
